/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function ($, Drupal, drupalSettings) {
  Drupal.Message.defaultWrapper = function () {
    var wrapper = document.querySelector("[data-drupal-messages]");
    if (!wrapper) {
      wrapper = document.querySelector("[data-drupal-messages-fallback]");
      wrapper.removeAttribute("data-drupal-messages-fallback");
      wrapper.setAttribute("data-drupal-messages", "");
      wrapper.removeAttribute("class");
    }

    var inner = wrapper.querySelector("messages__wrapper") || Drupal.Message.messageInternalWrapper(wrapper);

    var _wrapper = wrapper,
        children = _wrapper.children;

    [].concat(_toConsumableArray(children)).filter(function (child) {
      return !child.classList.contains("messages__wrapper");
    }).forEach(function (child) {
      inner.appendChild(child);
    });

    return inner;
  };

  Drupal.behaviors.LbUXMessage = {
    attach: function attach() {
      var displayMessages = function displayMessages(messageList) {
        var messagesWrapper = document.querySelector(".js-messages__wrapper") ? document.querySelector(".js-messages__wrapper") : document.querySelector("[data-drupal-messages]").classList.add("js-messages__wrapper");

        var messages = new Drupal.Message(messagesWrapper);
        var messageQueue = messageList.reduce(function (queue, list) {
          Object.keys(list).forEach(function (type) {
            list[type].filter(function (message) {
              return !drupalSettings.lbUX.messageDisplay.find(function (display) {
                return message === display.text;
              });
            }).forEach(function (message) {
              queue.push({ message: message, type: type });
            });
          });
          return queue;
        }, []);

        messageQueue.forEach(function (item, index) {
          var message = item.message,
              type = item.type;

          var id = messages.add(message, { priority: type, type: type });
          var messageClose = document.createElement("button");
          messageClose.innerHTML = "<span class=\"visually-hidden\">" + Drupal.t("Close") + "</span>";
          messageClose.setAttribute("data-drupal-message-id", id);
          messageClose.classList.add("drupal-message-close");

          var messageWrapper = document.querySelector("[data-drupal-message-id=" + id + "]");
          messageWrapper.classList.add("messages__closeable");
          messageWrapper.style.setProperty("--animation-index", index);
          messageWrapper.appendChild(messageClose);

          drupalSettings.lbUX.messageDisplay.push({
            text: message,
            type: type,
            id: id
          });
        });

        messagesWrapper.addEventListener("click", function (event) {
          if (event.target.classList.contains("drupal-message-close")) {
            var id = event.target.dataset.drupalMessageId;
            messages.remove(id);
          }
        });
      };

      if (drupalSettings.hasOwnProperty("lbUX")) {
        if (!drupalSettings.lbUX.hasOwnProperty("messageDisplay")) {
          drupalSettings.lbUX.messageDisplay = [];
        }
        displayMessages(drupalSettings.lbUX.messageList);
      }
    }
  };
})(jQuery, Drupal, drupalSettings);