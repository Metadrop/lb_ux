/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, drupalSettings) {
  var selectors = {
    wrapper: {
      initial: "data-drupal-messages",
      active: "js-messages__wrapper"
    },
    message: {
      id: "data-drupal-message-id",
      active: "messages__closeable",
      button: "drupal-message-close"
    }
  };

  var lbMessage = {
    list: [],
    display: []
  };

  var initWrapper = function initWrapper() {
    var _selectors$wrapper = selectors.wrapper,
        active = _selectors$wrapper.active,
        initial = _selectors$wrapper.initial;
    var button = selectors.message.button;


    var wrapper = document.querySelector("." + active);
    if (!wrapper) {
      wrapper = document.querySelector("[" + initial + "]");
      wrapper.classList.add(active);
    }

    if (!lbMessage.hasOwnProperty("message")) {
      lbMessage.message = new Drupal.Message(wrapper);
      wrapper.addEventListener("click", function (event) {
        if (event.target.classList.contains(button)) {
          var id = event.target.dataset.drupalMessageId;
          lbMessage.message.remove(id);
        }
      });
    }
  };

  var buttonClose = function buttonClose(id) {
    var _selectors$message = selectors.message,
        idSelector = _selectors$message.id,
        buttonSelector = _selectors$message.button;

    var button = document.createElement("button");
    button.innerHTML = "<span class=\"visually-hidden\">\n          " + Drupal.t("Close") + "\n        </span>";
    button.setAttribute(idSelector, id);
    button.classList.add(buttonSelector);

    return button;
  };

  var displayMessages = function displayMessages(messageList) {
    initWrapper();

    var messageQueue = messageList.reduce(function (queue, list) {
      Object.keys(list).forEach(function (type) {
        list[type].filter(function (message) {
          return !lbMessage.display.find(function (display) {
            return message === display.text;
          });
        }).forEach(function (message) {
          queue.push({ message: message, type: type });
        });
      });
      return queue;
    }, []);

    messageQueue.forEach(function (item, index) {
      var messageText = item.message,
          type = item.type;
      var _selectors$message2 = selectors.message,
          idSelector = _selectors$message2.id,
          active = _selectors$message2.active;

      var id = lbMessage.message.add(messageText, {
        priority: type,
        type: type
      });

      var message = document.querySelector("[" + idSelector + "=" + id + "]");
      message.classList.add(active);
      message.style.setProperty("--animation-index", index);
      message.appendChild(buttonClose(id));

      lbMessage.display.push({
        text: messageText,
        type: type,
        id: id
      });
    });
  };

  Drupal.behaviors.LbUXMessage = {
    attach: function attach() {

      if (drupalSettings.hasOwnProperty("lbUX")) {
        lbMessage.list = drupalSettings.lbUX.messageList;
      }

      displayMessages(lbMessage.list);
    }
  };
})(jQuery, Drupal, drupalSettings);